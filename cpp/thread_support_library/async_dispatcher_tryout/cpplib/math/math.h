// Copyright (c) 2019 by Thermo Fisher Scientific
// All rights reserved. This file includes confidential and proprietary information of Thermo Fisher Scientific

#pragma once

#include <type_traits>
#include <limits>

//TICS -OLC#009 "Avoid the use of so-called "magic numbers" in arbitrary expressions"

namespace cpp
{
namespace math
{

namespace constants
{
// converted from boost using regex : 
// find : BOOST_DEFINE_MATH_CONSTANT\((.*?),.*?"(.*?)"\)
// replace : template<typename T> constexpr T $1() { return $2; }

template<typename T> constexpr T half() { return 5.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01; }
template<typename T> constexpr T third() { return 3.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333e-01; }
template<typename T> constexpr T twothirds() { return 6.66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667e-01; }
template<typename T> constexpr T two_thirds() { return 6.66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667e-01; }
template<typename T> constexpr T sixth() { return 1.66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667e-01; }
template<typename T> constexpr T three_quarters() { return 7.50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01; }
template<typename T> constexpr T root_two() { return 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; }
template<typename T> constexpr T root_three() { return 1.73205080756887729352744634150587236694280525381038062805580697945193301690880003708114618675724857567562614142e+00; }
template<typename T> constexpr T half_root_two() { return 7.07106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506923115e-01; }
template<typename T> constexpr T ln_two() { return 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; }
template<typename T> constexpr T ln_ln_two() { return -3.66512920581664327012439158232669469454263447837105263053677713670561615319352738549455822856698908358302523045e-01; }
template<typename T> constexpr T root_ln_four() { return 1.17741002251547469101156932645969963774738568938582053852252575650002658854698492680841813836877081106747157858e+00; }
template<typename T> constexpr T one_div_root_two() { return 7.07106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506923115e-01; }
template<typename T> constexpr T pi() { return 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651e+00; }
template<typename T> constexpr T half_pi() { return 1.57079632679489661923132169163975144209858469968755291048747229615390820314310449931401741267105853399107404326e+00; }
template<typename T> constexpr T third_pi() { return 1.04719755119659774615421446109316762806572313312503527365831486410260546876206966620934494178070568932738269550e+00; }
template<typename T> constexpr T sixth_pi() { return 5.23598775598298873077107230546583814032861566562517636829157432051302734381034833104672470890352844663691347752e-01; }
template<typename T> constexpr T two_pi() { return 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303e+00; }
template<typename T> constexpr T two_thirds_pi() { return 2.09439510239319549230842892218633525613144626625007054731662972820521093752413933241868988356141137865476539101e+00; }
template<typename T> constexpr T three_quarters_pi() { return 2.35619449019234492884698253745962716314787704953132936573120844423086230471465674897102611900658780098661106488e+00; }
template<typename T> constexpr T four_thirds_pi() { return 4.18879020478639098461685784437267051226289253250014109463325945641042187504827866483737976712282275730953078202e+00; }
template<typename T> constexpr T one_div_two_pi() { return 1.59154943091895335768883763372514362034459645740456448747667344058896797634226535090113802766253085956072842727e-01; }
template<typename T> constexpr T one_div_root_two_pi() { return 3.98942280401432677939946059934381868475858631164934657665925829670657925899301838501252333907306936430302558863e-01; }
template<typename T> constexpr T root_pi() { return 1.77245385090551602729816748334114518279754945612238712821380778985291128459103218137495065673854466541622682362e+00; }
template<typename T> constexpr T root_half_pi() { return 1.25331413731550025120788264240552262650349337030496915831496178817114682730392098747329791918902863305800498633e+00; }
template<typename T> constexpr T root_two_pi() { return 2.50662827463100050241576528481104525300698674060993831662992357634229365460784197494659583837805726611600997267e+00; }
template<typename T> constexpr T log_root_two_pi() { return 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; }
template<typename T> constexpr T one_div_root_pi() { return 5.64189583547756286948079451560772585844050629328998856844085721710642468441493414486743660202107363443028347906e-01; }
template<typename T> constexpr T root_one_div_pi() { return 5.64189583547756286948079451560772585844050629328998856844085721710642468441493414486743660202107363443028347906e-01; }
template<typename T> constexpr T pi_minus_three() { return 1.41592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513e-01; }
template<typename T> constexpr T four_minus_pi() { return 8.58407346410206761537356616720497115802830600624894179025055407692183593713791001371965174657882932017851913487e-01; }
template<typename T> constexpr T pow23_four_minus_pi() { return 7.95316767371597544348395335056806580727639173327713205445302234388856268267518187590758006888600828436839800178e-01; }
template<typename T> constexpr T pi_pow_e() { return 2.24591577183610454734271522045437350275893151339966922492030025540669260403991179123185197527271430315314500731e+01; }
template<typename T> constexpr T pi_sqr() { return 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377e+00; }
template<typename T> constexpr T pi_sqr_div_six() { return 1.64493406684822643647241516664602518921894990120679843773555822937000747040320087383362890061975870530400431896e+00; }
template<typename T> constexpr T pi_cubed() { return 3.10062766802998201754763150671013952022252885658851076941445381038063949174657060375667010326028861930301219616e+01; }
template<typename T> constexpr T cbrt_pi() { return 1.46459188756152326302014252726379039173859685562793717435725593713839364979828626614568206782035382089750397002e+00; }
template<typename T> constexpr T one_div_cbrt_pi() { return 6.82784063255295681467020833158164598108367515632448804042681583118899226433403918237673501922595519865685577274e-01; }
template<typename T> constexpr T e() { return 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193e+00; }
template<typename T> constexpr T exp_minus_half() { return 6.06530659712633423603799534991180453441918135487186955682892158735056519413748423998647611507989456026423789794e-01; }
template<typename T> constexpr T e_pow_pi() { return 2.31406926327792690057290863679485473802661062426002119934450464095243423506904527835169719970675492196759527048e+01; }
template<typename T> constexpr T root_e() { return 1.64872127070012814684865078781416357165377610071014801157507931164066102119421560863277652005636664300286663776e+00; }
template<typename T> constexpr T log10_e() { return 4.34294481903251827651128918916605082294397005803666566114453783165864649208870774729224949338431748318706106745e-01; }
template<typename T> constexpr T one_div_log10_e() { return 2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00; }
template<typename T> constexpr T ln_ten() { return 2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00; }
template<typename T> constexpr T degree() { return 1.74532925199432957692369076848861271344287188854172545609719144017100911460344944368224156963450948221230449251e-02; }
template<typename T> constexpr T radian() { return 5.72957795130823208767981548141051703324054724665643215491602438612028471483215526324409689958511109441862233816e+01; }
template<typename T> constexpr T sin_one() { return 8.41470984807896506652502321630298999622563060798371065672751709991910404391239668948639743543052695854349037908e-01; }
template<typename T> constexpr T cos_one() { return 5.40302305868139717400936607442976603732310420617922227670097255381100394774471764517951856087183089343571731160e-01; }
template<typename T> constexpr T sinh_one() { return 1.17520119364380145688238185059560081515571798133409587022956541301330756730432389560711745208962339184041953333e+00; }
template<typename T> constexpr T cosh_one() { return 1.54308063481524377847790562075706168260152911236586370473740221471076906304922369896426472643554303558704685860e+00; }
template<typename T> constexpr T phi() { return 1.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748475408808e+00; }
template<typename T> constexpr T ln_phi() { return 4.81211825059603447497758913424368423135184334385660519661018168840163867608221774412009429122723474997231839958e-01; }
template<typename T> constexpr T one_div_ln_phi() { return 2.07808692123502753760132260611779576774219226778328348027813992191974386928553540901445615414453604821933918634e+00; }
template<typename T> constexpr T euler() { return 5.77215664901532860606512090082402431042159335939923598805767234884867726777664670936947063291746749514631447250e-01; }
template<typename T> constexpr T one_div_euler() { return 1.73245471460063347358302531586082968115577655226680502204843613287065531408655243008832840219409928068072365714e+00; }
template<typename T> constexpr T euler_sqr() { return 3.33177923807718674318376136355244226659417140249629743150833338002265793695756669661263268631715977303039565603e-01; }
template<typename T> constexpr T zeta_two() { return 1.64493406684822643647241516664602518921894990120679843773555822937000747040320087383362890061975870530400431896e+00; }
template<typename T> constexpr T zeta_three() { return 1.20205690315959428539973816151144999076498629234049888179227155534183820578631309018645587360933525814619915780e+00; }
template<typename T> constexpr T catalan() { return 9.15965594177219015054603514932384110774149374281672134266498119621763019776254769479356512926115106248574422619e-01; }
template<typename T> constexpr T glaisher() { return 1.28242712910062263687534256886979172776768892732500119206374002174040630885882646112973649195820237439420646120e+00; }
template<typename T> constexpr T khinchin() { return 2.68545200106530644530971483548179569382038229399446295305115234555721885953715200280114117493184769799515346591e+00; }
template<typename T> constexpr T extreme_value_skewness() { return 1.13954709940464865749279301938984611208759979583655182472165571008524800770607068570718754688693851501894272049e+00; }
template<typename T> constexpr T rayleigh_skewness() { return 6.31110657818937138191899351544227779844042203134719497658094585692926819617473725459905027032537306794400047264e-01; }
template<typename T> constexpr T rayleigh_kurtosis() { return 3.24508930068763806284866041061975441541706673178920936177133764493367904540874159051490619368679348977426462633e+00; }
template<typename T> constexpr T rayleigh_kurtosis_excess() { return 2.45089300687638062848660410619754415417066731789209361771337644933679045408741590514906193686793489774264626328e-01; }
template<typename T> constexpr T two_div_pi() { return 6.36619772367581343075535053490057448137838582961825794990669376235587190536906140360455211065012343824291370907e-01; }
template<typename T> constexpr T root_two_div_pi() { return 7.97884560802865355879892119868763736951717262329869315331851659341315851798603677002504667814613872860605117725e-01; }
template<typename T> constexpr T one_hundred_eighty() { return 180.0; }

} // constants

template <typename To>
To floor_to(double d)
{
    return static_cast<To>(floor(d));
}

template <typename To>
To ceil_to(double d)
{
    return static_cast<To>(ceil(d));
}

inline double round(double d)
{
    return std::floor(d + .5);
}

template <typename To>
To round_to(double d)
{
    return static_cast<To>(round(d));
}

template <typename To, typename From>
To clip_to(From value)
{
    static To minVal = std::numeric_limits<To>::min();
    static To maxVal = std::numeric_limits<To>::max();
    return value < minVal ? minVal : value < maxVal ? static_cast<To>(value) : maxVal;
}

inline double degree_to_radian(double degrees)
{
    return constants::pi<double>() * degrees / constants::one_hundred_eighty<double>();
}

inline double radian_to_degree(double radian)
{
    return constants::one_hundred_eighty<double>() * radian / constants::pi<double>();
}

template <int Base>
double log(double x)
{
    static const double logBase = std::log(static_cast<double>(Base));
    return std::log(x) / logBase;
}

inline double log2(double x)
{
    return std::log(x) / constants::ln_two<double>();
}

} // math
} // cpp