#pragma once

#include <stdint.h>

namespace Server {
namespace CeosProtocol {

const uint32_t MAGIC_NUMBER = 0x01020304;
const uint32_t MAGIC_NUMBER_CONFIRMATION_SUCCESS = 0x00000000;
const uint32_t MAGIC_NUMBER_SUCCESS = 0x00000000;  
const uint32_t WRONG_COOKIE_NUMBER = 0x01010101;
const uint32_t WRONG_MAGIC_NUMBER = 0x01010101;
const uint32_t WRONG_PROTOCOL_VERSION = 0x04040404;
const uint32_t CONNECTION_ID_CONFIRMATION_SUCCESS = 0x00000000;  
const uint32_t CONNECTION_ID_WRONG = 0x01010101;
const uint32_t MAGIC_NUMBER_WRONG_BYTE_ORDER = 0x01010101;
const uint32_t MAGIC_NUMBER_CONNECTION_REFUSED = 0x02020202;

const uint32_t MAJORNUMBER = 2; // Poduct version
const uint32_t PROTOCOL_OK = 0x00000000;

const uint32_t LOCALCODES = 1000000;
const uint32_t RESULTCODES = 1000000;
const uint32_t DATATYPES = 100;
const uint32_t MESSAGETYPES= 1000;
const uint32_t OBJECTTYPES = 10000;
const uint32_t OPCODES = 1000;
const uint32_t UNITS = 1000;

const uint32_t CLIENTID_OFFSET = RESULTCODES + DATATYPES + MESSAGETYPES + OBJECTTYPES + OPCODES + UNITS + 1000;
        
const uint32_t RESULT_UNKNOWN = 0 + LOCALCODES;
const uint32_t RESULT_OK = 1 + LOCALCODES;
const uint32_t RESULT_ERROR_INTERNAL = 2 + LOCALCODES;
const uint32_t RESULT_ERROR_BUSY = 3 + LOCALCODES;
const uint32_t RESULT_ERROR_PROTOCOL = 4 + LOCALCODES;
const uint32_t RESULT_ERROR_CSGUI = 5 + LOCALCODES;
const uint32_t RESULT_ERROR_DISCONNECTED = 6 + LOCALCODES;
const uint32_t RESULT_ERROR_TIMEOUT = 7 + LOCALCODES;
const uint32_t RESULT_ERROR_AT_NOT_DEFINED = 8 + LOCALCODES;
const uint32_t RESULT_ERROR_RANGE_OVERFLOW = 9 + LOCALCODES;
const uint32_t RESULT_ERROR_AT_NOT_DEFINED_AND_RANGE_OVERFLOW = 10 + LOCALCODES;
const uint32_t RESULT_ERROR_SENDBUFFER_OVERFLOW = 11 + LOCALCODES;
const uint32_t RESULT_ERROR_UNKNOWN_CLIENT_TYPE = 12 + LOCALCODES;
const uint32_t RESULT_ERROR_DIFFERENT_PROTOCOL_VERSION = 13 + LOCALCODES;
        
const uint32_t DATA_TYPE_UNKNOWN = 0 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_CHAR = 1 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_FLOAT = 2 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_DOUBLE = 3 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_INTEGER = 5 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_UNSIGNED_INTEGER = 6 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_SHORT = 7 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_UNSIGNED_SHORT = 8 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_BOOL = 11 + LOCALCODES + RESULTCODES;
const uint32_t DATA_TYPE_RAW_DATA = 12 + LOCALCODES + RESULTCODES;
        
const uint32_t MESSAGE_TYPE_UNKNOWN = 0 + LOCALCODES + RESULTCODES + DATATYPES;
const uint32_t MESSAGE_TYPE_COMMAND = 1 + LOCALCODES + RESULTCODES + DATATYPES;
const uint32_t MESSAGE_TYPE_EVENT = 2 + LOCALCODES + RESULTCODES + DATATYPES;
const uint32_t MESSAGE_TYPE_RESULT = 3 + LOCALCODES + RESULTCODES + DATATYPES;
        
const uint32_t COMMAND_UNKNOWN                            = 0   + LOCALCODES + RESULTCODES + DATATYPES + MESSAGETYPES + OBJECTTYPES; // 2011100
const uint32_t COMMAND_LOGON                            = 1   + LOCALCODES + RESULTCODES + DATATYPES + MESSAGETYPES + OBJECTTYPES;

uint32_t SwapBytes(uint32_t value);

} // namespace Ceos
} // namespace Server
